import { contacts } from "./data";
import type { Contact, ContactsMap } from "./types";

// –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ LocalStorage
export function loadContactsFromLocalStorage() {
    console.log('üîç LOAD CONTACTS: Start');
    console.log('Current contacts before load:', contacts);

    // —è–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å localStorage
    const savedContacts = localStorage.getItem('contacts');

    console.log('Saved contacts:', savedContacts);

    if (savedContacts) {
        try {
            const parsedContacts = JSON.parse(savedContacts);
            console.log('üîç LOAD CONTACTS: Parsed contacts:', parsedContacts);

            // –ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å—Å–∏–≤–∞
            contacts.length = 0;
            contacts.push(...parsedContacts);
        } catch (error) {
            console.log('üö® Error parsing contacts:', error);
            localStorage.removeItem('contacts');
        }
    }

    console.log('üîç LOAD CONTACTS: After load:', contacts);
    updateLetterCounts(contacts);
    console.log('üîç LOAD CONTACTS: End');
}

// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ LocalStorage
export function saveContactsToLocalStorage() {
    console.log('üíæ SAVE CONTACTS: Start');
    console.log('üíæ Contacts to save:', [...contacts]);

    if (contacts.length > 0) {
        localStorage.setItem('contacts', JSON.stringify(contacts));
    } else {
        localStorage.removeItem('contacts');
    }
    console.log('üíæ SAVE CONTACTS: End');
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
export function addContact(contact: Contact): Contact {
    console.log('‚ûï ADD CONTACT: Start');
    console.log('‚ûï Contact to add:', contacts);
    console.log('‚ûï Current contacts:', [...contacts]);

    contacts.push(contact); // —è–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ contacts

    console.log('‚ûï Contacts after add:', [...contacts]);

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –±—É–∫–≤
    saveContactsToLocalStorage();
    updateLetterCounts(contacts);

    console.log('‚ûï ADD CONTACT: End');
    return contact;
}
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
export function clearContacts() {
    contacts.length = 0; // –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
    saveContactsToLocalStorage();
    updateLetterCounts(contacts);
}

// —Ñ—É–Ω–∫—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –∏–º–µ–Ω–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞ { A: [...], B: [...], ... }
export function groupByLetter(list: Contact[]): ContactsMap {
    const grouped: ContactsMap = {};
    const letterPattern = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë]$/; // —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–∫–≤–æ–π

    for (const contact of list) {
        const rawLetter = contact.name.charAt(0);

        if (!rawLetter) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞

        const firstLetter = rawLetter.toUpperCase();

        if (!letterPattern.test(firstLetter)) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –±—É–∫–≤–∞

        if (!grouped[firstLetter]) {
            grouped[firstLetter] = [];
        }

        grouped[firstLetter].push(contact);
    }
    return grouped;
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –±—É–∫–≤
export function updateLetterCounts(contacts: Contact[]) {
    console.log('üìä UPDATE LETTER COUNTS: Start');
    console.log('üìä Total contacts:', contacts.length);
    console.log('üìä Actual contacts:', [...contacts]);

    // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –±—É–∫–≤
    const letterBlocks = document.querySelectorAll('.alphabet-list .letter-block');

    // –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ—Ç - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
    if (contacts.length === 0) {
        letterBlocks.forEach((block) => {
            const letter = block.getAttribute('data-letter');
            block.textContent = letter || '';
        });
        return;
    }

    // // –∫–æ–Ω—Ç–∞–∫—Ç—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
    // const groupedContacts = contacts.reduce((acc, contact) => {
    //     const firstLetter = contact.name[0].toUpperCase();
    //     console.log('Processing contact:', contact.name, 'First letter:', firstLetter);
    //
    //     if (!acc[firstLetter]) {
    //         acc[firstLetter] = 0;
    //     }
    //     acc[firstLetter]++;
    //     return acc;
    // }, {} as Record<string, number>);
    //
    // console.log('Grouped contacts:', groupedContacts);

    // –ø–æ–¥—Å—á–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –±—É–∫–≤–∞–º
    const letterCounts: Record<string, number> = {};
    contacts.forEach(contact => {
        const firstLetter = contact.name[0].toUpperCase();
        letterCounts[firstLetter] = (letterCounts[firstLetter] || 0) + 1;
    });

    // –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –±–ª–æ–∫–∏ —Å –±—É–∫–≤–∞–º–∏
    letterBlocks.forEach((block) => {
        const letter = block.getAttribute('data-letter');
        if (letter) {
            const count = letterCounts[letter] || 0;
            block.textContent = count > 0 ? `${letter} (${count})` : letter;
        }
    });
    console.log('üìä UPDATE LETTER COUNTS: End');
}

export function searchContacts(query: string): Contact[] {
    const lowerQuery = query.toLowerCase();
    console.log('Search query:', lowerQuery);


    const results = contacts.filter(contact => {
        console.log('Checking contact:', contact.name, 'Query:', lowerQuery);
        console.log('Name includes:', contact.name.toLowerCase().includes(lowerQuery));
        return contact.name.toLowerCase().includes(lowerQuery) ||
        contact.phone.includes(lowerQuery)
    });

    console.log('Search results:', results);
    return results;
}

export function deleteContact(contactToDelete: Contact): void {
    console.log('üóëÔ∏è DELETE CONTACT: Start');
    console.log('üóëÔ∏è Contact to delete:', contactToDelete);
    console.log('üóëÔ∏è Current contacts:', [...contacts]);

    // —è–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    const index = contacts.findIndex(
        contact =>
            // contact.name === contactToDelete.name &&
            // contact.phone === contactToDelete.phone &&
            contact.id === contactToDelete.id
    );

    if (index !== -1) {
        console.log('üóëÔ∏è Contact found. Removing...');

        // —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        contacts.splice(index, 1);

        console.log('üóëÔ∏è Contacts after deletion:', [...contacts]);

        // —è–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ LocalStorage
        saveContactsToLocalStorage();

        updateLetterCounts(contacts);
    } else {
        console.warn('üóëÔ∏è Contact not found for deletion');
    }
    console.log('üóëÔ∏è DELETE CONTACT: End');
}

export function editContact(oldContact: Contact, newContactData: Contact): string | null {
    const index = contacts.findIndex(
        contact =>
            contact.name === oldContact.name &&
            contact.phone === oldContact.phone &&
            contact.id === oldContact.id
    );

    if (index === -1) return "Contact not found";

    // –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const trimmedName = newContactData.name.trim();
    const trimmedPhone = newContactData.phone.trim();

    if (trimmedName.length === 0) return "Name cannot be empty";
    if (trimmedPhone.length === 0) return "Phone cannot be empty";

    // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–µ–∂–Ω–∏–π ID
    contacts[index] = {
        id: oldContact.id,
        name: trimmedName,
        vacancy: newContactData.vacancy.trim(),
        phone: trimmedPhone
    };

    saveContactsToLocalStorage();
    updateLetterCounts(contacts);
    return null; // –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
}

export function getContactsByLetter(contact: Contact[], letter: string): Contact[] {
    return contacts.filter(contact =>
        contact.name[0].toUpperCase() === letter.toUpperCase()
    );
}